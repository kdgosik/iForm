source('~/Documents/Projects/RProjects/iForm/R/iFORM.R')
library(iForm)
?model.frame
?combn
?which.min
?Filter
?setdiff
?sapply
?as.matrix
?which.min
?as.formula
?as.ff
library(iForm)
library(iForm)
devtools::use_vignette("my-vignette")
library(iForm)
head(mtcars)
iForm(mpg~., mtcars)
iForm(mpg~., mtcars, strong=F)
?iForm
library(iForm)
iForm(mpg~., mtcars, strong=F)
?iForm
library(iForm)
?iForm
?iForm
library(iForm)
?iForm
iForm(mpg~., mtcars, strong=F)
library(iForm)
library(iForm)
iForm::
?iForm
remove.packages("iForm")
library(iForm)
?iForm
remove.packages("iForm")
library(iForm)
?iForm
remove.packages("iFORM")
remove.packages("iForm")
library(iForm)
?iForm
remove.packages("iForm")
library(iForm)
iForm
?iForm
library(iForm)
library(iForm)
iForm <- function(formula, data, strong = TRUE, higher_order = FALSE) {
dat <- model.frame(formula, data)
y <- dat[ , 1]
x <- dat[ , -1]
p <- ncol(x)
n <- nrow(x)
solution <- NULL
model <- NULL
step <- 1
bic <- NULL
candidate <- as.data.frame(x)
fit <- iformselect(x, y, p, n, candidate, solution, model, bic, step, strong, higher_order)
y <- fit$y
solution <- fit$solution
model <- fit$model
bic <- fit$bic
model <- data.frame(solution[ , 1 : which.min(bic), drop = FALSE])
lm(y ~ . + 0 , data = model)
}
library(iForm)
devtools::document()
library(iForm)
iForm(mpg~., mtcars)
iForm(mpg~., mtcars, strong = F)
?iForm
iForm(mpg~., mtcars, strong = FALSE)
??Hitters
iForm(hp~., mtcars)
iForm(hp~., mtcars, strong = FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ISLR)
data("Hitters")
if(length(new.packages)) install.packages(new.packages)
installed.packages("Hitters")
installed.packages("ISLR")
# Using a slightly larger dataset from the package ISLR
# If package isn't installed this code will install it
list.of.packages <- c("ISLR")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(ISLR)
data("Hitters")
names(Hitters)  # Variable names
dim(Hitters)  # dimensions of the dataset
sum(is.na(Hitters$Salary))  # number of NA values in the Salary variable
Hitters <- na.omit(Hitters)  # removing all na values
dim(Hitters)  # rechecking dimension size after removal of NA's
sum(is.na(Hitters))   # rechecking number of NA values
library(iForm)
devtools::document()
library(iForm)
rm(list=ls())
library(iForm)
library(iForm)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(iForm)
data("mtcars")
names(mtcars)  # Variable names
dim(mtcars)  # dimensions of the dataset
sum(is.na(mtcars$hp)) # checking number of NA values
help("mtcars") # more info on mtcars
# Running iForm on R dataset mtcars using hourse power as response (hp)
iForm.fit1 <- iForm(hp ~ ., mtcars)
?iForm
devtools::document()
library(iForm)
?iForm
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(iForm)
data("mtcars")
names(mtcars)  # Variable names
dim(mtcars)  # dimensions of the dataset
sum(is.na(mtcars$hp)) # checking number of NA values
help("mtcars") # more info on mtcars
# Running iForm on R dataset mtcars using hourse power as response (hp)
iForm.fit1 <- iForm(hp ~ ., mtcars)
iForm.fit1
remove.packages("iForm")
devtools::document()
library(iForm)
devtools::document()
library(iForm)
?iForm
devtools::document()
remove.packages("iForm")
library(iForm)
?iForm
library(iForm)
library(iForm)
?iForm
devtools::document()
library(iForm)
devtools::document()
library(iForm)
install.packages("ISLR")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ISLR)
data("Hitters")
names(Hitters)  # Variable names
dim(Hitters)  # dimensions of the dataset
sum(is.na(Hitters$Salary))  # number of NA values in the Salary variable
Hitters <- na.omit(Hitters)  # removing all na values
dim(Hitters)  # rechecking dimension size after removal of NA's
sum(is.na(Hitters))   # rechecking number of NA values
help("Hitters") # more information on Hitters dataset
iForm.fit2 <- iForm(Salary ~ ., Hitters)
iForm.fit2
help("Hitters") # more information on Hitters dataset
iForm.fit2_weak <- iForm(Salary ~ ., Hitters, strong = FALSE)
iForm.fit2_weak
library(iForm)
library(iForm)
library(knitr)
dir("~/Documents/data")
dir("~/Documents/data", "VAER")
dir("~/Documents/data", "VAER", recursive = T)
dir("~/Documents/data", "VAER", recursive = T, full.names = T)
Filter("VAERSDATA", dir("~/Documents/data", "VAER", recursive = T, full.names = T)
)
Filter("VAERSDATA", dir("~/Documents/data", "VAER", recursive = T, full.names = T))
Filter(function(x) grep("VAERSDATA",x), dir("~/Documents/data", "VAER", recursive = T, full.names = T))
Filter(function(x) grepl("VAERSDATA",x), dir("~/Documents/data", "VAER", recursive = T, full.names = T))
Filter(function(x) grepl("VAERSDATA",x), dir("~/Documents/data", "VAER", recursive = T, full.names = T)) %>% lapply(., fread)
library(data.table)
library(magrittr)
dat <- Filter(function(x) grepl("VAERSDATA",x), dir("~/Documents/data", "VAER", recursive = T, full.names = T)) %>% lapply(., fread)
dat <- Filter(function(x) grepl("VAERSDATA",x), dir("~/Documents/data", "VAER", recursive = T, full.names = T)) %>% lapply(., fread) %>% rbindlist()
View(dat)
setwd("~/Documents")
dir("~/Documents/data", "VAER", recursive = TRUE, full.names = TRUE))
dir("~/Documents/data", "VAER", recursive = TRUE, full.names = TRUE)
dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE)
vaer_data <- dir("~/Documents/data", "VAERSDATA", recursive = TRUE, full.names = TRUE)) %>%
lapply(., fread) %>% rbindlist()
library(data.table)
library(magrittr)
vaer_data <- dir("~/Documents/data", "VAERSDATA", recursive = TRUE, full.names = TRUE)) %>%
lapply(., fread) %>% rbindlist()
library(data.table)
library(magrittr)
vaer_data <- dir("~/Documents/data", "VAERSDATA", recursive = TRUE, full.names = TRUE) %>%
lapply(., fread) %>%
rbindlist()
vaer_vax <- dir("~/Documents/data", "VAERSVAX", recursive = TRUE, full.names = TRUE) %>%
lapply(., fread) %>%
rbindlist()
vaer_symp <- dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE) %>%
lapply(., fread) %>%
rbindlist()
vaer_symp <- dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE) %>%
lapply(., fread) %>%
rbindlist(.,fill=T)
vaer_symp <- dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE) %>%
lapply(., fread)
dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE)
View(vaer_vax)
View(vaer_data)
dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE)
symp <- fread(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE)[1])
symp <- readLines(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE)[1])
symp <- tolower(symp)
grepl("anaphylaxis", symp)
table(grepl("anaphylaxis", symp)0
table(grepl("anaphylaxis", symp))
symp[1:5]
symp[2]
strsplit(symp[2],",")
strsplit(symp[3],",")
unlist(strsplit(symp[3],","))
Filter(function(x) grepl("", x), unlist(strsplit(symp[3],","))
)
Filter(function(x) grepl("", x), unlist(strsplit(symp[3],",")))
Filter(function(x) grepl('""', x), unlist(strsplit(symp[3],",")))
Filter(function(x) grepl(`""``, x), unlist(strsplit(symp[3],",")))
)
)
)
``
Filter(function(x) grepl(`""`, x), unlist(strsplit(symp[3],",")))
vaer_symp <- readLines(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE))
symp
lapply(symp, strplit, ",")
lapply(symp, strsplit, ",")
sapply(symp, strsplit, ",")
library(jsonlite)
sapply(symp, strsplit, ",") %>% toJSON()
sapply(symp, strsplit, ",")
sapply(symp, strsplit, ",") %>% stringr::str_remove(.,"")
library(stringr)
sapply(symp, str_split, ",")
sentences <- c("Jane saw a cat", "Jane sat down")
word(sentences, 1)
word(sentences, 2)
word(sentences, -1)
word(sentences, 2, -1)
vaer_symp <- readLines(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE))
dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE)
vaer_symp <- sapply(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE)) %>%
readLines
vaer_symp <- sapply(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE)) %>%
readLines(.)
?readLines
vaer_symp <- sapply(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE), readLines)
length(vaer_symp)
vaer_symp[[1]]
vaer_symp <- sapply(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE), function(x) {
readLines %>%
str_split(., ",")
}) %>% unlist
vaer_symp <- sapply(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE), function(x) {
readLines %>% sapply(., str_split ",")
}) %>% unlist
vaer_symp <- sapply(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE), function(x) {
readLines(x) %>% sapply(., str_split ",")
}) %>% unlist
dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE)
sapply(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE), function(x) {
readLines(x) %>% sapply(., str_split ",")
})
dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE)
readLines( "/Users/kgosik/Documents/data/2012VAERSData/2012VAERSSYMPTOMS.csv")
readLines( "/Users/kgosik/Documents/data/2012VAERSData/2012VAERSSYMPTOMS.csv") %>% sapply(.,str_split, ",")
vaer_symp <- sapply(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE),
function(x) { readLines(x) %>% sapply(., str_split, ",") }) %>%
unlist
vaer_symp
vaer_symp <- sapply(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE),
function(x) { readLines(x) %>% sapply(., str_split, ",") })
vaer_symp[[1]]
vaer_symp <- unlist(vaer_symp)
vaer_symp <- sapply(dir("~/Documents/data", "VAERSSYMPTOMS", recursive = TRUE, full.names = TRUE),
function(x) { readLines(x) %>% sapply(., str_split, ",") })
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(iForm)
data("mtcars")
names(mtcars)  # Variable names
dim(mtcars)  # dimensions of the dataset
sum(is.na(mtcars$hp)) # checking number of NA values
help("mtcars") # more info on mtcars
# Running iForm on R dataset mtcars using hourse power as response (hp)
iForm.fit1 <- iForm(hp ~ ., mtcars)
iForm.fit1
# fitting the iForm procedure with the weak heredity assumption
iForm.weak.fit1 <- iForm(hp ~ ., mtcars, strong = FALSE)
iForm.weak.fit1
library(ISLR)
data("Hitters")
names(Hitters)  # Variable names
dim(Hitters)  # dimensions of the dataset
sum(is.na(Hitters$Salary))  # number of NA values in the Salary variable
Hitters <- na.omit(Hitters)  # removing all na values
dim(Hitters)  # rechecking dimension size after removal of NA's
sum(is.na(Hitters))   # rechecking number of NA values
help("Hitters") # more information on Hitters dataset
iForm.fit2 <- iForm(Salary ~ ., Hitters)
iForm.fit2
help("Hitters") # more information on Hitters dataset
iForm.fit2_weak <- iForm(Salary ~ ., Hitters, strong = FALSE)
iForm.fit2_weak
help("Hitters") # more information on Hitters dataset
iForm.fit2 <- iForm(Salary ~ ., Hitters, higher_order = T)
help("Hitters") # more information on Hitters dataset
iForm.fit2 <- iForm(Salary ~ ., Hitters)
iForm.fit2
str(Hitters)
library(iForm)
library(iForm)
